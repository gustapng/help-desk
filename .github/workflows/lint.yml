name: Linting CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: docker compose up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for Docker services to start..."
          sleep 15

      - name: Create .env files for Docker Compose and Backend
        run: |
          echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" > .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

          echo "APP_ENV=testing" > backend/.env # Use testing para CI
          echo "APP_DEBUG=true" >> backend/.env
          echo "APP_URL=${{ secrets.APP_URL }}" >> backend/.env
          echo "DB_CONNECTION=${{ secrets.DB_CONNECTION }}" >> backend/.env
          echo "DB_HOST=database" >> backend/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> backend/.env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> backend/.env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> backend/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> backend/.env

          docker compose exec backend php artisan key:generate
          docker compose exec backend php artisan config:clear

      - name: Install Composer Dependencies (Backend)
        run: docker compose exec backend composer install --no-dev --prefer-dist

      - name: Run Laravel Pint (Backend Linting)
        run: docker compose exec backend php artisan pint --test

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install NPM Dependencies (Frontend)
        run: cd frontend && npm install

      - name: Run ESLint (Frontend Linting)
        run: cd frontend && npm run lint